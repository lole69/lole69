
 #include "pitches.h"
/*
 * Created by ArduinoGetStarted.com
 *
 * This example code is in the public domain
 *
 * Tutorial page: https://arduinogetstarted.com/tutorials/arduino-button-piezo-buzzer
 */


const int ledPin1=13;
const int ledPin2=12;
const int ledPin3=11;
const int ledPin4=10;
const int ledPin5=9;

const int BUTTON_PIN = 7; // Arduino pin connected to button's pin
const int BUZZER_PIN = 3; // Arduino pin connected to Buzzer's pin
const int BUZZEr = 4; // Arduino pin connected to Buzzer's pin

// notes in the melody:
int melody[] = {
  NOTE_E5, NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_G5, NOTE_C5, NOTE_D5,
  NOTE_E5,
  NOTE_F5, NOTE_F5, NOTE_F5, NOTE_F5,
  NOTE_F5, NOTE_E5, NOTE_E5, NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_D5, NOTE_D5, NOTE_E5,
  NOTE_D5, NOTE_G5
};

// note durations: 4 = quarter note, 8 = eighth note, etc, also called tempo:
int noteDurations[] = {
  8, 8, 4,
  8, 8, 4,
  8, 8, 8, 8,
  2,
  8, 8, 8, 8,
  8, 8, 8, 16, 16,
  8, 8, 8, 8,
  4, 4
};
void myISR(){
  Serial.print("dlasa");
      tone(BUZZER_PIN, NOTE_A5,10000);
      

}
void setup() {
  Serial.begin(9600);                // initialize serial
  pinMode(BUTTON_PIN, INPUT_PULLUP); // set arduino pin to input pull-up mode
      attachInterrupt(digitalPinToInterrupt(BUZZEr), myISR, FALLING); // trigger when button pressed, but not when released.

}

void loop() {
  pinMode(ledPin1,OUTPUT);
  pinMode(ledPin2,OUTPUT);
  pinMode(ledPin3,OUTPUT);
  pinMode(ledPin4,OUTPUT);


  int buttonState = digitalRead(BUTTON_PIN); // read new state

  if (buttonState == LOW) { // button is pressed
    Serial.println("The button is being pressed");
    buzzer();
  }
}

void buzzer() {
  // iterate over the notes of the melody:
  int size = sizeof(noteDurations) / sizeof(int);

  for (int thisNote = 0; thisNote < size; thisNote++) {
    if(melody[thisNote]==NOTE_E5){
        digitalWrite(ledPin1,HIGH);
    }
     if(melody[thisNote]==NOTE_G5){
        digitalWrite(ledPin2,HIGH);
    }
     if(melody[thisNote]==NOTE_C5){
        digitalWrite(ledPin3,HIGH);
    }
      if(melody[thisNote]==NOTE_D5){
        digitalWrite(ledPin4,HIGH);
    }
       if(melody[thisNote]==NOTE_F5){
        digitalWrite(ledPin5,HIGH);
    }
    // to calculate the note duration, take one second divided by the note type.
    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(BUZZER_PIN, melody[thisNote], noteDuration);

    
    

    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 30% seems to work well:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop the tone playing:
     if(melody[thisNote]==NOTE_E5){
        digitalWrite(ledPin1,LOW);
    }
     if(melody[thisNote]==NOTE_G5){
        digitalWrite(ledPin2,LOW);
    }
       if(melody[thisNote]==NOTE_C5){
        digitalWrite(ledPin3,LOW);
    }
       if(melody[thisNote]==NOTE_D5){
        digitalWrite(ledPin4,LOW);
    }
         if(melody[thisNote]==NOTE_F5){
        digitalWrite(ledPin5,LOW);
    }
    noTone(BUZZER_PIN);
  }
}
